name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., v1.0.0)'
        required: true
        type: string
      release_notes:
        description: 'Custom release notes (optional - leave empty for auto-generated)'
        required: false
        type: string
        default: ''
      skip_notarization:
        description: 'Set to true to skip macOS notarization during the build.'
        required: false
        type: boolean
        default: false
      skip_build:
        description: 'Set to true to skip build stage and only run release (use existing artifacts).'
        required: false
        type: boolean
        default: false

jobs:
  build:
    runs-on: ${{ matrix.os }}
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.skip_build != 'true'
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Create .env file
        run: |
          echo "VITE_OPENAI_API_KEY=${{ secrets.VITE_OPENAI_API_KEY }}" >> .env
          echo "VITE_ANTHROPIC_API_KEY=${{ secrets.VITE_ANTHROPIC_API_KEY }}" >> .env
          echo "VITE_GOOGLE_API_KEY=${{ secrets.VITE_GOOGLE_API_KEY }}" >> .env
          echo "VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}" >> .env
          echo "VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}" >> .env
          echo "VITE_TAVILY_API_KEY=${{ secrets.VITE_TAVILY_API_KEY }}" >> .env
          echo "VITE_GH_TOKEN=${{ secrets.VITE_GH_TOKEN }}" >> .env

      # Build with notarization (default)
      - name: Build application (macOS)
        if: matrix.os == 'macos-latest' && (github.event_name != 'workflow_dispatch' || github.event.inputs.skip_notarization != 'true')
        run: bun run build:release
        env:
          NODE_ENV: production
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}

      # Build without notarization when the flag is set
      - name: Build application (macOS – skip notarization)
        if: matrix.os == 'macos-latest' && github.event_name == 'workflow_dispatch' && github.event.inputs.skip_notarization == 'true'
        run: bun run build:release -- -c.mac.notarize=false
        env:
          NODE_ENV: production
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # explicitly disable identity auto-discovery so electron-builder doesn't try to find a signing cert
          CSC_IDENTITY_AUTO_DISCOVERY: "false"

      - name: Build application (Windows/Linux)
        if: matrix.os != 'macos-latest'
        run: bun run build:release
        env:
          NODE_ENV: production
          # fully disable any signing autodiscovery so electron-builder skips Win code-sign
          CSC_IDENTITY_AUTO_DISCOVERY: "false"

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            release/*.dmg
            release/*.zip
            release/*.yml
            release/*.blockmap

      - name: Generate Windows update file
        if: matrix.os == 'windows-latest'
        run: |
          # Generate latest.yml for Windows
          cd release
          if ls *.exe 1> /dev/null 2>&1; then
            EXE_FILE=$(ls *.exe | head -1)
            VERSION=$(node -p "require('../package.json').version")
            SHA512=$(openssl dgst -sha512 -binary "$EXE_FILE" | openssl base64 -A)
            SIZE=$(stat -c%s "$EXE_FILE" 2>/dev/null || stat -f%z "$EXE_FILE")
            RELEASE_DATE=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
            
            cat > latest.yml << EOF
          version: $VERSION
          files:
            - url: $EXE_FILE
              sha512: $SHA512
              size: $SIZE
          path: $EXE_FILE
          sha512: $SHA512
          releaseDate: "$RELEASE_DATE"
          EOF
            echo "Generated latest.yml for Windows"
          else
            echo "No Windows executable found"
          fi

      - name: Generate Linux update file
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Generate latest-linux.yml for Linux
          cd release
          if ls *.AppImage 1> /dev/null 2>&1; then
            APPIMAGE_FILE=$(ls *.AppImage | head -1)
            VERSION=$(node -p "require('../package.json').version")
            SHA512=$(openssl dgst -sha512 -binary "$APPIMAGE_FILE" | openssl base64 -A)
            SIZE=$(stat -c%s "$APPIMAGE_FILE")
            RELEASE_DATE=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
            
            cat > latest-linux.yml << EOF
          version: $VERSION
          files:
            - url: $APPIMAGE_FILE
              sha512: $SHA512
              size: $SIZE
          path: $APPIMAGE_FILE
          sha512: $SHA512
          releaseDate: "$RELEASE_DATE"
          EOF
            echo "Generated latest-linux.yml for Linux"
          else
            echo "No Linux AppImage found"
          fi

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            release/*.exe
            release/*.yml
            release/*.blockmap

      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            release/*.AppImage
            release/*.yml
            release/*.blockmap

  release:
    needs: build
    runs-on: ubuntu-latest
    if: always() && (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch') && (needs.build.result == 'success' || (github.event_name == 'workflow_dispatch' && github.event.inputs.skip_build == 'true'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check build skip status
        run: |
          if [ "${{ github.event.inputs.skip_build }}" = "true" ]; then
            echo "🚀 SKIP_BUILD enabled - Using existing artifacts for release"
            echo "📦 Looking for previously built artifacts..."
          else
            echo "🔨 BUILD completed - Using fresh artifacts for release"
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List available artifacts
        run: |
          echo "📁 Available artifacts:"
          find . -name "*.dmg" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.zip" | sort

      - name: Create release in public repository
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_TOKEN }}
          PUBLIC_REPO: ${{ secrets.PUBLIC_REPO_NAME }}
        run: |
          # Get version from tag or input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          
          # Create release notes header
          echo "## Wagoo $VERSION" > release_notes.md
          echo "" >> release_notes.md
          
          # Add custom release notes if provided
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            echo "### Release Notes" >> release_notes.md
            echo "${{ github.event.inputs.release_notes }}" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Add download instructions
          echo "### Downloads" >> release_notes.md
          echo "" >> release_notes.md
          echo "Download the appropriate version for your platform:" >> release_notes.md
          echo "" >> release_notes.md
          echo "- **macOS**: `Wagoo-arm64.dmg` (Apple Silicon) or `Wagoo-x64.dmg` (Intel)" >> release_notes.md
          echo "- **Windows**: `Wagoo-Windows-$VERSION.exe`" >> release_notes.md
          echo "- **Linux**: `Wagoo-Linux-$VERSION.AppImage`" >> release_notes.md
          echo "" >> release_notes.md
          
          # Add commit history or default message
          echo "### Changes" >> release_notes.md
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            # If custom notes provided, try to add commit history as supplementary info
            echo "" >> release_notes.md
            echo "<details>" >> release_notes.md
            echo "<summary>Commit History</summary>" >> release_notes.md
            echo "" >> release_notes.md
            git log --oneline --since="$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null)" HEAD 2>/dev/null | sed 's/^/- /' >> release_notes.md || echo "- First release" >> release_notes.md
            echo "" >> release_notes.md
            echo "</details>" >> release_notes.md
          else
            # If no custom notes, show commit history as main content
            git log --oneline --since="$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null)" HEAD 2>/dev/null | sed 's/^/- /' >> release_notes.md || echo "- First release" >> release_notes.md
          fi
          
          # Allow glob patterns that match nothing to expand to nothing instead of erroring
          shopt -s nullglob

          # Upload only the actual application files, avoiding duplicate metadata files
          gh release create "$VERSION" \
            --repo "$PUBLIC_REPO" \
            --title "Wagoo $VERSION" \
            --notes-file release_notes.md \
            macos-build/*.dmg \
            macos-build/*.zip \
            windows-build/*.exe \
            linux-build/*.AppImage \
            macos-build/latest-mac.yml \
            windows-build/latest.yml \
            linux-build/latest-linux.yml